Downloading Sample Weather DataSet 

$ wget https://www.ncei.noaa.gov/pub/data/uscrn/products/daily01/2020/CRND0103-2020-AK_Fairbanks_11_NE.txt

$ cp RND0103-2020-AK_Fairbanks_11_NE.txt weather.txt

First Open Eclipse -> then select File -> New -> Java Project ->Name it MyProject -> then select use an execution environment -> choose JavaSE-1.8 then next -> Finish.

In this Project Create Java class with name MyMaxMin -> then click Finish

MyMaxMin.java

// importing Libraries
import java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.conf.Configuration;

public class MyMaxMin {
    public static class MaxTemperatureMapper extends Mapper<LongWritable, Text, Text, Text> {
   	  
    @Override
    public void map(LongWritable arg0, Text Value, Context context)throws IOException, InterruptedException {
   	 String line = Value.toString();
   		 if (!(line.length() == 0)) {
      			 String date = line.substring(6, 14);
   			 float temp_Max = Float.parseFloat(line.substring(39, 45).trim());
   			 
   			 float temp_Min = Float.parseFloat(line.substring(47, 53).trim());
   			 if (temp_Max > 30.0) {
   				 
   			 context.write(new Text("The Day is Hot Day :" + date),new Text(String.valueOf(temp_Max)));
   			 }
      			 if (temp_Min < 15) {
   			
   				 context.write(new Text("The Day is Cold Day :" + date),new Text(String.valueOf(temp_Min)));
   			 }
   		 }
   	 }

    }
    public static class MaxTemperatureReducer extends Reducer<Text, Text, Text, Text>{
public void reduce(Text Key, Iterator<Text> Values, Context context) throws IOException, InterruptedException {
   		 String temperature = Values.next().toString();
   		 context.write(Key, new Text(temperature));
   	 }
    }
  public static void main(String[] args) throws Exception {
   	 Configuration conf = new Configuration();	 
   	 Job job = new Job(conf, "weather example");
   	 job.setJarByClass(MyMaxMin.class);
   	 job.setMapOutputKeyClass(Text.class);
   	 job.setMapOutputValueClass(Text.class);
   	 job.setMapperClass(MaxTemperatureMapper.class);
     	 job.setReducerClass(MaxTemperatureReducer.class);
   	 job.setInputFormatClass(TextInputFormat.class);
   	 job.setOutputFormatClass(TextOutputFormat.class);
   	 Path OutputPath = new Path(args[1]);
   	 FileInputFormat.addInputPath(job, new Path(args[0]));
   	 FileOutputFormat.setOutputPath(job, new Path(args[1]));
   	 OutputPath.getFileSystem(conf).delete(OutputPath);
   	 System.exit(job.waitForCompletion(true) ? 0 : 1);

    }
}

Now we add these external jars to our MyProject. Right Click on MyProject -> then select Build Path-> Click on Configure Build Path and select Add External jars…. and add jars from it’s download location then click -> Apply and Close.

External Path jars Path

/home/mca/Hadoop/share/hadoop/common/hadoop-common-2.7.3.jar
/home/mca/Hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-core-2.7.3.jar

Now export the project as jar file. Right-click on MyProject choose Export.. and go to Java -> JAR file click -> Next and choose your export destination then click -> Next. 
choose Main Class as MyMaxMin by clicking -> Browse and then click -> Finish -> Ok.

Start  Hadoop Daemons

$ hdfs namenode -format
$ start-all.sh
$ hdfs dfs -mkdir /testing
$ hdfs dfs -put ~/weather.txt /testing
$ hadoop jar ~/weather.jar /testing/weather.txt /output
$ hdfs dfs -cat /output/part-r-00000

Check in Browser :   http://localhost:50070
